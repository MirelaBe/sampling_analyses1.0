dat$Country <- gsub("_", " ", dat$Country)
dat$Country <- gsub("Congo Kinshasa", "Democratic Republic of the Congo" , dat$Country)
dat$Country <- gsub("Cote D'Ivoire", "Cote d'Ivoire" , dat$Country)
dat$Country <- gsub("Iran", "Iran (Islamic Republic of)" , dat$Country)
dat$Country <- gsub("Kazakstan", "Kazakhstan" , dat$Country)
dat$Country <- gsub("Libya", "Libyan Arab Jamahiriya", dat$Country)
dat$Country <- gsub("North Korea", "Korea, Democratic People's Republic of", dat$Country)
dat$Country <- gsub("Russian Federation", "Russia" , dat$Country)
dat$Country <- gsub("Serbia and Montenegro", "Serbia" , dat$Country)
dat$Country <- gsub("South Korea", "Korea, Republic of", dat$Country)
dat$Country <- gsub("Svalbard and Jan Mayen", "Svalbard" , dat$Country)
dat$Country <- gsub("Syria", "Syrian Arab Republic" , dat$Country)
dat$Country <- gsub("Tanzania", "United Republic of Tanzania" , dat$Country)
dat$Country <- gsub("Vietnam", "Viet Nam", dat$Country)
dat2 <- merge(dat, cont, by = "Country")
dim(dat)[1] == dim(dat2)[1]
#option2
dat2 <- dat2[dat2$subregion %in% c(21, 13, 151, 30, 154, 155, 143, 145, 39, 34),]#145
dat2$hemisphere <-  "oldworld"
dat2[dat2$region == 19, "hemisphere"] <-  "newworld"
head(dat2)
write.table(dat2, "classified_input.txt", sep = "\t")
?sprintf
libarry(speciegeocodeR)
libarry(speciesgeocodeR)
libary(speciegeocodeR)
library(speciegeocodeR)
library(speciesgeocodeR)
?spGeoCod
?SpGeoCod
?read.table
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/ZDS_DES_model/Rfunctions+scripts")
library(maps)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
x <- "Example_data/Example_1_minimum_data.txt"
dat <- read.table(x, sep = "\t", header = T, row.names = NULL)
head(dat)
nes <- c("scientificName", "earliestAge", "latestAge", "higherGeography")
if(!all(nes %in% names(dat))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(dat)]))
}
if(! "midpointAge" %in% names(dat)){
dat$midpointAge <- (dat$earliestAge + dat$latestAge)/2
warning("column midpointAge not found, calculating from earliestAge and latestAge")
}
recent <- "Example_data/Example_1_recent_distributions.txt"
rece <- read.table(recent, header = T, sep = "\t", stringsAsFactors = F, row.names = NULL)
head(rece)
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
str(dat)
dat$latestAge
is.na(dat$latestAge)
sum(is.na(dat$latestAge))
sum(is.na(dat$earliestAge))
# load data
dat <- read.table(x, sep = "\t", header = T, row.names = NULL)
nes <- c("scientificName", "earliestAge", "latestAge", "higherGeography")
if(!all(nes %in% names(dat))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(dat)]))
}
if(! "midpointAge" %in% names(dat)){
dat$midpointAge <- (dat$earliestAge + dat$latestAge)/2
warning("column midpointAge not found, calculating from earliestAge and latestAge")
}
# load and prepare recent data
rece <- read.table(recent, header = T, sep = "\t", stringsAsFactors = F, row.names = NULL)
nes <- c("scientificName", "higherGeography")
if(!all(nes %in% names(rece))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(rece)]))
}
rece[rece$higherGeography == unique(rece$higherGeography)[1], "higherGeography"] <- 1
rece[rece$higherGeography == unique(rece$higherGeography)[2], "higherGeography"] <- 2
rece <- unique(rece)
rece$higherGeography <- as.numeric(rece$higherGeography)
rece <- aggregate(higherGeography ~ scientificName, data = rece, sum)
# code fossil data
outp <- list()
for (i in 1:reps) {
if (verbose == TRUE) {
print(sprintf("producing replicate %s of %s", i, reps))
}
dat <- read.table(x, sep = "\t", header = T, row.names = NULL)
nes <- c("scientificName", "earliestAge", "latestAge", "higherGeography")
if(!all(nes %in% names(dat))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(dat)]))
}
if(! "midpointAge" %in% names(dat)){
dat$midpointAge <- (dat$earliestAge + dat$latestAge)/2
warning("column midpointAge not found, calculating from earliestAge and latestAge")
}
# load and prepare recent data
rece <- read.table(recent, header = T, sep = "\t", stringsAsFactors = F, row.names = NULL)
nes <- c("scientificName", "higherGeography")
if(!all(nes %in% names(rece))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(rece)]))
}
rece[rece$higherGeography == unique(rece$higherGeography)[1], "higherGeography"] <- 1
rece[rece$higherGeography == unique(rece$higherGeography)[2], "higherGeography"] <- 2
rece <- unique(rece)
rece$higherGeography <- as.numeric(rece$higherGeography)
rece <- aggregate(higherGeography ~ scientificName, data = rece, sum)
i <- 1
if (verbose == TRUE) {
print(sprintf("producing replicate %s of %s", i, reps))
}
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$latestAge[x],
min = dat$earliestAge[x]))
warnings()
str(dat)
head(dat)
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$earliestAge[x],
min = dat$latestAge[x]))
dat$age
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
summary(exp1)
par(ask = T)
plot(exp1)
source("DES_input_preparation.R")
plot(exp1)
str(exp1[[3]])
exp1[[3]][[1]]
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
exp1[[3]][[1]]
# load data
dat <- read.table(x, sep = "\t", header = T, row.names = NULL)
nes <- c("scientificName", "earliestAge", "latestAge", "higherGeography")
if(!all(nes %in% names(dat))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(dat)]))
}
if(! "midpointAge" %in% names(dat)){
dat$midpointAge <- (dat$earliestAge + dat$latestAge)/2
warning("column midpointAge not found, calculating from earliestAge and latestAge")
}
# load and prepare recent data
rece <- read.table(recent, header = T, sep = "\t", stringsAsFactors = F, row.names = NULL)
nes <- c("scientificName", "higherGeography")
if(!all(nes %in% names(rece))){
stop(sprintf("did not find column %s. Check input data", nes[!nes %in% names(rece)]))
}
rece[rece$higherGeography == unique(rece$higherGeography)[1], "higherGeography"] <- 1
rece[rece$higherGeography == unique(rece$higherGeography)[2], "higherGeography"] <- 2
rece <- unique(rece)
rece$higherGeography <- as.numeric(rece$higherGeography)
rece <- aggregate(higherGeography ~ scientificName, data = rece, sum)
# code fossil data
outp <- list()
i <- 1
# simulate random age between min and max
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$earliestAge[x],
min = dat$latestAge[x]))
# define age class cutter and cut ages into timebins
cutter <- seq(0, max(dat$age), bin.size)
dat$timeint <- as.numeric(as.character(cut(dat$age, breaks = cutter,
digits = 5, labels = cutter[-length(cutter)])))
# code the presence in each regions per scientificName
dat.list <- split(dat, dat$scientificName)
binned <- lapply(dat.list, function(x) {
dat.out <- data.frame(timebin = cutter, higherGeography1 = rep(0, length(cutter)),
higherGeography2 = rep(0, length(cutter)))
if (length(x$higherGeography == unique(dat$higherGeography)[1]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[1],
"timeint"], "higherGeography1"] <- 1
}
if (length(x$higherGeography == unique(dat$higherGeography)[2]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[2],
"timeint"], "higherGeography2"] <- 2
}
presence <- rowSums(dat.out[, 2:3])
return(presence)
})
# set timebins before first appearance to NaN
out <- lapply(binned, function(x) {
if (length(which(x > 0)) == 0) {
x <- rep("nan", length(x))
return(as.numeric(x))
} else {
if (max(which(x > 0)) < length(x)) {
x[(max(which(x > 0)) + 1):length(x)] <- "nan"
return(as.numeric(x))
} else {
return(x)
}
}
})
# output format
out <- do.call("rbind.data.frame", out)
names(out) <- (cutter + bin.size/2)
# out <- out[,as.numeric(names(out)) < age.cut]
out <- rev(out)
outp[[i]] <- out
}
bin.size = 2
# simulate random age between min and max
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$earliestAge[x],
min = dat$latestAge[x]))
# define age class cutter and cut ages into timebins
cutter <- seq(0, max(dat$age), bin.size)
dat$timeint <- as.numeric(as.character(cut(dat$age, breaks = cutter,
digits = 5, labels = cutter[-length(cutter)])))
# code the presence in each regions per scientificName
dat.list <- split(dat, dat$scientificName)
binned <- lapply(dat.list, function(x) {
dat.out <- data.frame(timebin = cutter, higherGeography1 = rep(0, length(cutter)),
higherGeography2 = rep(0, length(cutter)))
if (length(x$higherGeography == unique(dat$higherGeography)[1]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[1],
"timeint"], "higherGeography1"] <- 1
}
if (length(x$higherGeography == unique(dat$higherGeography)[2]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[2],
"timeint"], "higherGeography2"] <- 2
}
presence <- rowSums(dat.out[, 2:3])
return(presence)
})
# set timebins before first appearance to NaN
out <- lapply(binned, function(x) {
if (length(which(x > 0)) == 0) {
x <- rep("nan", length(x))
return(as.numeric(x))
} else {
if (max(which(x > 0)) < length(x)) {
x[(max(which(x > 0)) + 1):length(x)] <- "nan"
return(as.numeric(x))
} else {
return(x)
}
}
})
# output format
out <- do.call("rbind.data.frame", out)
names(out) <- (cutter + bin.size/2)
# out <- out[,as.numeric(names(out)) < age.cut]
out <- rev(out)
outp[[i]] <- out
}
reps <- 2
reps <- 1
outp <- list()
for (i in 1:reps) {
if (verbose == TRUE) {
print(sprintf("producing replicate %s of %s", i, reps))
}
# simulate random age between min and max
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$earliestAge[x],
min = dat$latestAge[x]))
# define age class cutter and cut ages into timebins
cutter <- seq(0, max(dat$age), bin.size)
dat$timeint <- as.numeric(as.character(cut(dat$age, breaks = cutter,
digits = 5, labels = cutter[-length(cutter)])))
# code the presence in each regions per scientificName
dat.list <- split(dat, dat$scientificName)
binned <- lapply(dat.list, function(x) {
dat.out <- data.frame(timebin = cutter, higherGeography1 = rep(0, length(cutter)),
higherGeography2 = rep(0, length(cutter)))
if (length(x$higherGeography == unique(dat$higherGeography)[1]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[1],
"timeint"], "higherGeography1"] <- 1
}
if (length(x$higherGeography == unique(dat$higherGeography)[2]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[2],
"timeint"], "higherGeography2"] <- 2
}
presence <- rowSums(dat.out[, 2:3])
return(presence)
})
# set timebins before first appearance to NaN
out <- lapply(binned, function(x) {
if (length(which(x > 0)) == 0) {
x <- rep("nan", length(x))
return(as.numeric(x))
} else {
if (max(which(x > 0)) < length(x)) {
x[(max(which(x > 0)) + 1):length(x)] <- "nan"
return(as.numeric(x))
} else {
return(x)
}
}
})
# output format
out <- do.call("rbind.data.frame", out)
names(out) <- (cutter + bin.size/2)
# out <- out[,as.numeric(names(out)) < age.cut]
out <- rev(out)
outp[[i]] <- out
}
verbose = T
outp <- list()
for (i in 1:reps) {
if (verbose == TRUE) {
print(sprintf("producing replicate %s of %s", i, reps))
}
# simulate random age between min and max
dat$age <- sapply(seq(1, length(dat$scientificName)), function(x) runif(1, max = dat$earliestAge[x],
min = dat$latestAge[x]))
# define age class cutter and cut ages into timebins
cutter <- seq(0, max(dat$age), bin.size)
dat$timeint <- as.numeric(as.character(cut(dat$age, breaks = cutter,
digits = 5, labels = cutter[-length(cutter)])))
# code the presence in each regions per scientificName
dat.list <- split(dat, dat$scientificName)
binned <- lapply(dat.list, function(x) {
dat.out <- data.frame(timebin = cutter, higherGeography1 = rep(0, length(cutter)),
higherGeography2 = rep(0, length(cutter)))
if (length(x$higherGeography == unique(dat$higherGeography)[1]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[1],
"timeint"], "higherGeography1"] <- 1
}
if (length(x$higherGeography == unique(dat$higherGeography)[2]) > 0) {
dat.out[dat.out$timebin %in% x[x$higherGeography == unique(dat$higherGeography)[2],
"timeint"], "higherGeography2"] <- 2
}
presence <- rowSums(dat.out[, 2:3])
return(presence)
})
# set timebins before first appearance to NaN
out <- lapply(binned, function(x) {
if (length(which(x > 0)) == 0) {
x <- rep("nan", length(x))
return(as.numeric(x))
} else {
if (max(which(x > 0)) < length(x)) {
x[(max(which(x > 0)) + 1):length(x)] <- "nan"
return(as.numeric(x))
} else {
return(x)
}
}
})
# output format
out <- do.call("rbind.data.frame", out)
names(out) <- (cutter + bin.size/2)
# out <- out[,as.numeric(names(out)) < age.cut]
out <- rev(out)
outp[[i]] <- out
}
head(outp)
head(outp[[1]])
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
head(outo)
x <- outp[[1]]
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
head(outo)
outo$higherGeography[is.na(outo$higherGeography)] <- 0
head(outo)
names(outo)[1] <- "scientificName"
names(outo)[ncol(outo)] <- 0
head(outo)
is(outo)
outo <- data.frame(apply(outo, 2, function(x) as.character(x)), stringsAsFactors = F)
head(outo)
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
outo$higherGeography[is.na(outo$higherGeography)] <- 0
names(outo)[1] <- "scientificName"
names(outo)[ncol(outo)] <- 0
str(outo)
head(outo)
is(ouo)
is(outo)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
exp1[[3]][[1]]
write.DES.in(molluscs, "Example1_out")
write.DES.in(exp1, "Example1_out")
write.DES.in(exp1, "Example_data/Example1_out")
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
write.DES.in(exp1, "Example_data/Example1_out")
outo <- data.frame(apply(outo, 2, function(x) as.character(x)), stringsAsFactors = F)
head(outo)
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
outo$higherGeography[is.na(outo$higherGeography)] <- 0
names(outo)[1] <- "scientificName"
names(outo)[ncol(outo)] <- 0
outo2 <- data.frame(apply(outo, 2, function(x) as.character(x)), stringsAsFactors = F)
names(outo2) <- outo
head(outo2)
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
outo$higherGeography[is.na(outo$higherGeography)] <- 0
names(outo)[1] <- "scientificName"
names(outo)[ncol(outo)] <- 0
outo2 <- data.frame(apply(outo, 2, function(x) as.character(x)), stringsAsFactors = F)
str(outo2)
str(outo)
is(outo)
is(outo2)
names(outo)
names(outo2)
outo <- merge(x, rece, by.x = "row.names", by.y = "scientificName", all.x = T)
outo$higherGeography[is.na(outo$higherGeography)] <- 0
names(outo)[1] <- "scientificName"
names(outo)[ncol(outo)] <- 0
outo2 <- data.frame(apply(outo, 2, function(x) as.character(x)), stringsAsFactors = F)
names(outo2) <- names(outo)
head(outo2)
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
head(exp1[[3]][[1]])
write.DES.in(exp1, "Example_data/Example1_DES_in")
i <- 1
x <- exp1
length(x[[3]]
length(x[[3]])
x[[3]][[i]]
paste(file, "_rep", i, ".txt", sep = "")
file = "Example_data/Example1_DES_in"
paste(file, "_rep", i, ".txt", sep = "")
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN",
sep = "\t", row.names = F, quote = F)
write.table(x[[3]][[i]], "XXX.txt")
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""))
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN")
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN", sep = "\t")
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN", sep = "\t", row.names = F)
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN", sep = "\t", row.names = F, quote = F)
?write.table
write.table(x[[3]][[i]], paste(file, "_rep", i, ".txt", sep = ""), na = "NaN",
sep = "\t", row.names = F, quote = F, fileEncoding="UTF-8")
x[[3]][[i]]
summary(exp1)
par(ask = T)
plot(exp1)
x <- exp1
z <- x[[3]][[1]]
are <- z
are[are == 2] <- 0
are[are == 3] <- 1
are[are == "NaN"] <- 0
head(are)
are[is.na(are)] <- 0
are
source("DES_input_preparation.R")
plot(exp1)
str(are)
as.numeric(are)
as.numeric(are[,-1])
are
source("DES_input_preparation.R")
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
head(exp1[[3]][[1]])
str(exp1[[3]][[1]])
write.DES.in(exp1, file = "Example_data/Example1_DES_in")
source("DES_input_preparation.R")
plot(exp1)
z <- exp1[[3]][[1]]
head(z)
are[are == 1] <- 0
are[are == NaN] <- 0
are[are == 3] <- 1
head(are)
are <- colSums(are[,-1])
str(are)
are <- z
str(are)
are[are == 1] <- 0
are[are == NaN] <- 0
are[are == 3] <- 1
str(are)
are[are == 1] <- 0
are[are == NaN] <- 0
are[are == 3] <- 1
str(are)
are[are == "NaN"] <- 0
are[are == 3] <- 1
str(are)
are <- colSums(are[,-1])
exp1 <- DESin("Example_data/Example_1_minimum_data.txt", "Example_data/Example_1_recent_distributions.txt",
bin.size = 2, reps = 3)
plot(exp1)
source("DES_input_preparation.R")
plot(exp1)
plot(exp1)
source("DES_input_preparation.R")
plot(exp1)
source("DES_input_preparation.R")
plot(exp1)
summary(exp1)
library(maptools)
tt <-readShapeSpatial(Example_regions)
tt <-readShapeSpatial(Example_data/Example_regions)
tt <-readShapeSpatial("Example_data/Example_regions")
head(tt)
fos.class <- SpGeoCod("Example_2_coordinates.txt", "Example_regions.shp", areanames = "id")
fos.class <- SpGeoCod("Example_data/Example_2_coordinates.txt", "Example_data/Example_regions.shp", areanames = "id")
tt <-readShapeSpatial("Example_data/Example_regions")
head(tt)
