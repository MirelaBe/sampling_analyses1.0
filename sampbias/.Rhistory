180 | suppressWarnings(as.numeric(as.character(x$longitude))) <
-180)] <- FALSE
out[which(suppressWarnings(as.numeric(as.character(x$latitude))) >
90 | suppressWarnings(as.numeric(as.character(x$latitude))) < -90)] <- FALSE
return(out)
}
val.test <- .ValidCoordinates(y[, -which(names(y) =="species")])
data
head(Data)
head(data)
names(y)[1] <- "species"
val.test <- .ValidCoordinates(y[, -which(names(y) =="species")])
str(y)
names(data) <- c("species", "longitude", "latitude")
head(y)
y <- data
head(y)
val.test <- .ValidCoordinates(y[, -which(names(y) =="species")])
str(val.test)
sum(!val.test)
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
warnings()
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
y <- data
val.test <- .ValidCoordinates(y[, -which(names(y) =="species")])
.ValidCoordinates <- function(x) {
out <- vector("logical", length = dim(x)[1])
out <- !out
# NA test
out[which(is.na(x$longitude) | is.na(x$latitude))] <- FALSE
# is numeric
out[which(suppressWarnings(is.na(as.numeric(as.character(x$longitude)))))] <- FALSE
out[which(suppressWarnings(is.na(as.numeric(as.character(x$latitude)))))] <- FALSE
# coordinate validity
out[which(suppressWarnings(as.numeric(as.character(x$longitude))) >
180 | suppressWarnings(as.numeric(as.character(x$longitude))) <
-180)] <- FALSE
out[which(suppressWarnings(as.numeric(as.character(x$latitude))) >
90 | suppressWarnings(as.numeric(as.character(x$latitude))) < -90)] <- FALSE
return(out)
}
val.test <- .ValidCoordinates(y[, -which(names(y) =="species")])
val.test
sum(val.test)
sum(!val.test)
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
test.large
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val]
data <- data[val,]
str(data)
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
data <- data[val,]
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
length(val)
dim(data)
str(data)
sata[3272,]
data[3272,]
library(sampbias)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
test.large
x <- data
dim(x)
head(x)
str(x)
val.test <- .ValidCoordinates(x)
.ValidCoordinates <- function(x) {
out <- vector("logical", length = dim(x)[1])
out <- !out
# NA test
out[which(is.na(x$longitude) | is.na(x$latitude))] <- FALSE
# is numeric
out[which(suppressWarnings(is.na(as.numeric(as.character(x$longitude)))))] <- FALSE
out[which(suppressWarnings(is.na(as.numeric(as.character(x$latitude)))))] <- FALSE
# coordinate validity
out[which(suppressWarnings(as.numeric(as.character(x$longitude))) >
180 | suppressWarnings(as.numeric(as.character(x$longitude))) <
-180)] <- FALSE
out[which(suppressWarnings(as.numeric(as.character(x$latitude))) >
90 | suppressWarnings(as.numeric(as.character(x$latitude))) < -90)] <- FALSE
return(out)
}
val.test <- .ValidCoordinates(x)
x <- data[,2:3]
val.test <- .ValidCoordinates(x)
all(val.test)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
dim(data)
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
warnings()
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
warnings()
x <- data
splitter <- rep(1:ceiling(dim(x)[1]/10000), each = 10000)
splitter <- splitter[1:dim(x)[1]]
dat <- split(x, f = splitter)
li <- list()
length(dat)
str(Dat)
str(dat)
for(i in 1:2){
li[[i]] <- CleanCoordinates(dat[[i]][, -which(names(dat[[i]]) ==
"species")], dat[[i]][, "species"], ...)
if (verb == T) {
print(paste(i, "/", length(dat), ". Done. Local EQ = ",
round(sum(!tt$summary)/length(tt$summary), 2)), sep = "")
}
}
for(i in 1:2){
li[[i]] <- CleanCoordinates(dat[[i]][, -which(names(dat[[i]]) ==
"species")], dat[[i]][, "species"])#, ...)
if (verb == T) {
print(paste(i, "/", length(dat), ". Done. Local EQ = ",
round(sum(!tt$summary)/length(tt$summary), 2)), sep = "")
}
}
verb = T
for(i in 1:2){
li[[i]] <- CleanCoordinates(dat[[i]][, -which(names(dat[[i]]) ==
"species")], dat[[i]][, "species"])#, ...)
if (verb == T) {
print(paste(i, "/", length(dat), ". Done. Local EQ = ",
round(sum(!tt$summary)/length(tt$summary), 2)), sep = "")
}
}
}        for(i in 1:2){
li[[i]] <- CleanCoordinates(dat[[i]][, -which(names(dat[[i]]) ==
"species")], dat[[i]][, "species"])#, ...)
if (verb == T) {
print(paste(i, "/", length(dat), ". Done. Local EQ = ",
round(sum(!li[[i]]$summary)/length(li[[i]]$summary), 2)), sep = "")
}
}
for(i in 1:2){
li[[i]] <- CleanCoordinates(dat[[i]][, -which(names(dat[[i]]) ==
"species")], dat[[i]][, "species"])#, ...)
if (verb == T) {
print(paste(i, "/", length(dat), ". Done. Local EQ = ",
round(sum(!li[[i]]$summary)/length(li[[i]]$summary), 2)), sep = "")
}
}
library(formatR)
?formatR
?tidy_source
tidy_source(width.cutoff = 75)
tidy_source(width.cutoff = 75)
tidy_source(source = "clipboard", width.cutoff = 75)
tidy_source(source = "clipboard", width.cutoff = 75)
x <- data.frame(1,1)
x
species = NULL
dpl.test <- data.frame(x, species)
x <- data.frame(matrix(1,1,1,1,2,2, ncol = 2))
x <- data.frame(matrix(c(1,1,1,1,2,2) ncol = 2))
x <- data.frame(matrix(c(1,1,1,1,2,2), ncol = 2))
x
duplicated(x)
library(sampbias)
?while
x <- c(-120,-60)
refcities <- sampbias::cities[, 3:4]
referencedata <- refcities
if (dim(x)[1] < 100) {
optim <- "standard"
}
is.null(limits)
limits = NULL
is.null(limits)
testlimits <- c(max(c(min(x[, 1]) - 10, -180)),
min(c(max(x[, 1]) + 10, 180)),
max(c(min(x[, 2]) - 10, -90)),
min(c(max(x[, 2]) + 10, 90)))
x
data.frame(matrix(c(-120, -128, -60, -80)))
data.frame(matrix(c(-120, -128, -60, -80), ncol = 2))
x <- data.frame(matrix(c(-120, -128, -60, -80), ncol = 2))
testlimits <- c(max(c(min(x[, 1]) - 10, -180)),
min(c(max(x[, 1]) + 10, 180)),
max(c(min(x[, 2]) - 10, -90)),
min(c(max(x[, 2]) + 10, 90)))
testlimits
testdat <- referencedata[referencedata[, 1] > testlimits[1] &
referencedata[, 1] < testlimits[2], ]
testdat
x <- data.frame(matrix(c(-120, -128, -45, -45), ncol = 2))
if (is.null(limits)) {
testlimits <- c(max(c(min(x[, 1]) - 10, -180)),
min(c(max(x[, 1]) + 10, 180)),
max(c(min(x[, 2]) - 10, -90)),
min(c(max(x[, 2]) + 10, 90)))
} else {
testlimits <- limits
}
testlimits
testdat <- referencedata[referencedata[, 1] > testlimits[1] &
referencedata[, 1] < testlimits[2], ]
testdat
referencedata <- data.frame(matrix(c(1,10, 0, 30), ncol = 2))
testdat <- referencedata[referencedata[, 1] > testlimits[1] &
referencedata[, 1] < testlimits[2], ]
testdat
length(as.matrix(testdat)) == 2
testdat <- testdat[testdat[, 2] > testlimits[3] &
testdat[, 2] < testlimits[4], ]
testdat
class(testdat)
if(class(testdat) == "numeric"){
testdat <- matrix(testdat, ncol = 2)
}
dim(testdat)[1]
dim(testdat)[1] == 0
multpl <- 0
while(dim(testdat)[1] == 0){
print(multpl)
multpl <- multpl + 10
testlimits <- c(max(c(min(x[, 1]) - multpl, -180)),
min(c(max(x[, 1]) + multpl, 180)),
max(c(min(x[, 2]) - multpl, -90)),
min(c(max(x[, 2]) + multpl, 90)))
testdat <- referencedata[referencedata[, 1] > testlimits[1] &
referencedata[, 1] < testlimits[2], ]
if (length(as.matrix(testdat)) == 2) {
testdat <- testdat[testdat[2] > testlimits[3] & testdat[2] <
testlimits[4]]
} else {
testdat <- testdat[testdat[, 2] > testlimits[3] &
testdat[, 2] < testlimits[4], ]
}
if(class(testdat) == "numeric"){
testdat <- matrix(testdat, ncol = 2)
}
}
testdat
referencedata
rep.nam <- "CleanCoordinates_report.txt"
i.numerical(rep.nam)
is.numerical(rep.nam)
is.character(rep.nam)
is(rep.nam)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE, report = T)
warnings()
head(test.large)
head(data[,1])
plot(test.large,  xlim = c(-118,-33), ylim = c(-56,33))
sum(test.large$validity)
length(test.large$validity)
!out[-c(1:2)]
out <- test.large
!out[-c(1:2)]
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, rpt = T)
?REduce
?Reduce
tt <-data.frame(matrix(c(1,1,1,1), ncol = 2))
tt
as.list(tt)
as.list(test.largett)
test.large
out <- test.large
species = data[,1]
dpl.test <- data.frame(x, species)
is(x)
str(x)
x = data[,2:3]
dpl.test <- data.frame(x, species)
dpl <- !duplicated(dpl.test)
dim(dpl)
length(dpl)
head(out)
out <- data.frame(out, duplicates = dpl)
head(out)
out$summary <- Reduce("&", out[,-c(1,2)])
head(out)
library(sampbias)
library(sampbias)
library(sampbias)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, dupl = T, rpt = T)
dim(dpl)
length(dpl)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, duplicates = T, rpt = T)
#Plot
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, dupl = T, rpt = T)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs proper
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, dupl = T, rpt = T)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL, verb = T, verbose = T, dupl = T, rpt = T)
?CleanCoordinates
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL,
verb = T, verbose = T, dupl = T, rpt = T, outliers.td = 5000,
outliers.mtp = NULL)
warnings()
plot(test.large,  xlim = c(-118,-33), ylim = c(-56,33), clean = F)
dev.off()
plot.new()
plot(test.large,  xlim = c(-118,-33), ylim = c(-56,33), clean = F)
warnings()
str(test.large)
library(sampbias)
library(sampbias)
#Diretorio
setwd("C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/snakes2")
#Input de dados
data <- read.table("DatabaseSerpentes-sgcodeR-Complete.txt", sep = "\t", header = T)
data[,1] <- as.character(data[,1])
data[,2] <- as.numeric(as.character(data[,2]))
data[,3] <- as.numeric(as.character(data[,3]))
names(data) <- c("species", "longitude", "latitude")
#now this drops an error on which are the problematic coordinates
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[, 1], outp.path = NULL, verb = FALSE)
#clean those out
val <- sampbias:::.ValidCoordinates(data[,2:3])
data <- data[val,]
#runs properly
test.large <- CleanCoordinatesLarge(x = data[,2:3], species = data[,1], outp.path = NULL,
verb = T, verbose = T, dupl = T, rpt = T, outliers.td = 5000,
outliers.mtp = NULL)
plot(test.large,  xlim = c(-118,-33), ylim = c(-56,33), clean = F)
warnings()
