{
    "contents" : "CleanCoordinates <- function(x, species = NULL, validity = T, zeros = T, \n                             capitals = T, centroids = T, seas = T, \n                             urban = F, countrycheck = T, outliers = T,\n                             GBIF = T, duplicates = F, verbose = T, limits = NULL, \n                             output = c(\"spatialvalid\",\"summary\", \"cleaned\"), \n                             zeros.rad = 0.5, capitals.rad = 0.05, \n                             outliers.mtp = 25, outliers.td = NULL, \n                             centroids.rad = 0.01, capitals.ref = NULL, \n                             centroids.detail = c(\"both\", \"country\", \"provinces\"),\n                             centroids.ref = NULL, seas.ref = NULL, \n                             urban.ref = NULL, country.ref = NULL, \n                             method = c(\"Haversine\", \"Cosine\", \"VincentyEllipse\"), report = F) {\n  \n  match.arg(output)\n  match.arg(centroids.detail)\n  match.arg(method)\n  \n  if (class(x) == \"matrix\") {\n    if (dim(x)[2] > 2) {\n      warning(\"more than 2 inputcolumns, column 1 assumed to be longitude, column 2 assumed to be latitude\")\n    }\n    if (countrycheck == TRUE) {\n      countrycheck <- FALSE\n      warning(\"inputformat matrix, countrycheck set to FALSE\")\n    }\n  }\n  if (class(x) == \"data.frame\") {\n    if (dim(x)[2] == 2) {\n      if (countrycheck == TRUE) {\n        countrycheck <- FALSE\n        warning(\"found two columns, countrycheck set to FALSE\")\n      }\n    }\n    if (dim(x)[2] == 3) {\n      if (!\"country\" %in% names(x)) {\n        warning(\"assuming third column to contain country information\")\n      }\n    }\n    if (dim(x)[2] > 3) {\n      x <- try(x[, c(\"longitude\", \"latitude\", \"country\")])\n      if (class(x) == \"data.frame\") {\n        warning(\"more than three columns, inputcolumns guessed from column names\")\n      }\n      if (class(x) == \"try-error\") {\n        x <- try(x[, c(\"longitude\", \"latitude\")])\n        countrycheck <- FALSE\n        if (class(x) == \"data.frame\") {\n          warning(\"more than three columns, inputcolumns guessed from column names, no country column found, countrycheck set to FALSE\")\n        }\n        if (class(x) == \"try-error\") {\n          stop(\"to many input columns\")\n        }\n      }\n    }\n  }\n  names(x)[1:2] <- c(\"longitude\", \"latitude\")\n  \n  if (class(x) == \"SpatialPoints\") {\n    x <- coordinates(x)\n  }\n  \n  if (validity == TRUE) {\n    if (verbose == TRUE) {\n      cat(\"running validity test\\n\")\n    }\n    val <- .ValidCoordinates(x[, c(1, 2)])\n    if (all(val) == FALSE) {\n      warning(\"invalid coordinates found, clean dataset before further tests:\\n\", \n              paste(which(val == FALSE), \"\\n\"))\n      return(val)\n    } else {\n      val <- rep(TRUE, dim(x)[1])\n      \n      if (zeros == T) {\n        if (verbose == TRUE) {\n          cat(\"running zero coordinate test\\n\")\n        }\n        zer <- .ZeroCoordinates(x[, c(1, 2)], pointlim = zeros.rad)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!zer)))\n        }\n      } else {\n        zer <- rep(NA, dim(x)[1])\n      }\n      \n      if (capitals == TRUE) {\n        if (verbose == TRUE) {\n          cat(\"running capitals test\\n\")\n        }\n        cap <- .CapitalCoordinates(x[, c(1, 2)], testdist = capitals.rad, \n                                   limits = limits, referencedat = capitals.ref)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!cap)))\n        }\n      } else {\n        cap <- rep(NA, dim(x)[1])\n      }\n      \n      if (centroids == TRUE) {\n        if (verbose == TRUE) {\n          cat(\"running centroids test\\n\")\n        }\n        cen <- .CentroidCoordinates(x[, c(1, 2)], testdist = centroids.rad, \n                                    limits = limits, testtype = centroids.detail, \n                                    referencedat = centroids.ref)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!cen)))\n        }\n      } else {\n        cen <- rep(NA, dim(x)[1])\n      }\n      \n      if (seas == T) {\n        if (verbose == TRUE) {\n          cat(\"running seas test\\n\")\n        }\n        sea <- .WaterCoordinates(x[, c(1, 2)], poly = seas.ref)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!sea)))\n        }\n      } else {\n        sea <- rep(NA, dim(x)[1])\n      }\n      \n      if (urban == TRUE) {\n        if (verbose == TRUE) {\n          cat(\"running urban test\\n\")\n        }\n        urb <- !.UrbanCoordinates(x[, c(1, 2)], poly = urban.ref, \n                                  limits = limits)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!urb)))\n        }\n      } else {\n        urb <- rep(NA, dim(x)[1])\n      }\n      \n      if (countrycheck == TRUE) {\n        if (verbose == TRUE) {\n          cat(\"running countrycheck test\\n\")\n        }\n        dat <- x[, c(1, 2)]\n        countries <- x[, 3]\n        con <- .CountryCheck(dat, countries, poly = country.ref)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!con, na.rm = T)))\n        }\n      } else {\n        con <- rep(NA, dim(x)[1])\n      }\n      if (outliers == TRUE) {\n        if (is.null(species)) {\n          otl <- rep(NA, dim(x)[1])\n          warning(\"No species argument found, outliers test skipped\")\n        } else {\n          if (verbose == TRUE) {\n            cat(\"running outliers test\\n\")\n          }\n          otl <- .OutlierCoordinates(x[, c(1, 2)], species = species, \n                                     multiplier = outliers.mtp, \n                                     tdi = outliers.td, method = method)\n          if (verbose == TRUE) {\n            cat(sprintf(\"flagged %s records \\n\", sum(!otl)))\n          }\n        }\n      } else {\n        otl <- rep(NA, dim(x)[1])\n      }\n      if (GBIF == TRUE) {\n        if (verbose == TRUE) {\n          cat(\"running GBIF test\\n\")\n        }\n        gbf <- apply(x, 1, function(y) \n          all(!(y[\"longitude\"] >(12.58 - 0.5) & y[\"longitude\"] <\n                  (12.58 + 0.5) & y[\"latitude\"] >\n                  (55.67 - 0.5) & y[\"latitude\"] < \n                  (55.67 + 0.5))))\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!gbf)))\n        }\n      } else {\n        gbf <- rep(NA, dim(x)[1])\n      }\n      if(duplicates == T){\n        cat(\"running duplicates test\\n\")\n        if(is.null(species)){\n          dpl.test <- x\n        }else{\n          dpl.test <- data.frame(x, species)\n        }\n        dpl <- !duplicated(dpl.test)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!dpl)))\n        }\n      } else {\n        dpl <- rep(NA, dim(x)[1])\n      }\n    }\n  }\n  if (validity == FALSE) {\n    val <- rep(NA, dim(x)[1])\n    if (zeros == T) {\n      if (verbose == TRUE) {\n        cat(\"running zero coordinate test\\n\")\n      }\n      zer <- .ZeroCoordinates(x[, c(1, 2)], pointlim = zeros.rad)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!zer)))\n      }\n    } else {\n      zer <- rep(NA, dim(x)[1])\n    }\n    \n    if (capitals == TRUE) {\n      if (verbose == TRUE) {\n        cat(\"running capitals test\\n\")\n      }\n      cap <- .CapitalCoordinates(x[, c(1, 2)], testdist = capitals.rad, \n                                 limits = limits, referencedat = capitals.ref)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!cap)))\n      }\n    } else {\n      cap <- rep(NA, dim(x)[1])\n    }\n    \n    if (centroids == TRUE) {\n      if (verbose == TRUE) {\n        cat(\"running centroids test\\n\")\n      }\n      cen <- .CentroidCoordinates(x[, c(1, 2)], testdist = centroids.rad, \n                                  limits = limits, testtype = centroids.detail, \n                                  referencedat = centroids.ref)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!cen)))\n      }\n    } else {\n      cen <- rep(NA, dim(x)[1])\n    }\n    \n    if (seas == T) {\n      if (verbose == TRUE) {\n        cat(\"running seas test\\n\")\n      }\n      sea <- .WaterCoordinates(x[, c(1, 2)], poly = seas.ref)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!sea)))\n      }\n    } else {\n      sea <- rep(NA, dim(x)[1])\n    }\n    \n    if (urban == TRUE) {\n      if (verbose == TRUE) {\n        cat(\"running urban test\\n\")\n      }\n      urb <- !.UrbanCoordinates(x[, c(1, 2)], poly = urban.ref,\n                                limits = limits)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!urb)))\n      }\n    } else {\n      urb <- rep(NA, dim(x)[1])\n    }\n    \n    if (countrycheck == TRUE) {\n      if (verbose == TRUE) {\n        cat(\"running countrycheck test\\n\")\n      }\n      dat <- x[, c(1, 2)]\n      countries <- x[, 3]\n      con <- .CountryCheck(dat, countries, poly = country.ref)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!con, na.rm = T)))\n      }\n    } else {\n      con <- rep(NA, dim(x)[1])\n    }\n    if (outliers == TRUE) {\n      if (is.null(species)) {\n        otl <- rep(NA, dim(x)[1])\n        warning(\"no species argument found, outliers test skipped\")\n      } else {\n        if (verbose == TRUE) {\n          cat(\"running outliers test\\n\")\n        }\n        otl <- .OutlierCoordinates(x[, c(1, 2)], species = species, \n                                   multiplier = outliers.mtp, \n                                   tdi = outliers.td, method = method)\n        if (verbose == TRUE) {\n          cat(sprintf(\"flagged %s records \\n\", sum(!otl)))\n        }\n      }\n    } else {\n      otl <- rep(NA, dim(x)[1])\n    }\n    if (GBIF == TRUE) {\n      if (verbose == TRUE) {\n        cat(\"running GBIF test\\n\")\n      }\n      gbf <- apply(x, 1, function(y) \n        all(!(y[\"longitude\"] > (12.58 -0.5) & y[\"longitude\"] < \n                (12.58 + 0.5) & y[\"latitude\"] >\n                (55.67 - 0.5) & y[\"latitude\"] < \n                (55.67 + 0.5))))\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!gbf)))\n      }\n    } else {\n      gbf <- rep(NA, dim(x)[1])\n    }\n    if(duplicates == T){\n      cat(\"running duplicates test\\n\")\n      if(is.null(species)){\n        dpl.test <- x\n      }else{\n        dpl.test <- data.frame(x, species)\n      }\n      dpl <- !duplicated(dpl.test)\n      if (verbose == TRUE) {\n        cat(sprintf(\"flagged %s records \\n\", sum(!dpl)))\n      }\n    } else {\n      dpl <- rep(NA, dim(x)[1])\n    }\n  }\n  \n  out <- list(val, zer, cap, cen, sea, urb, con, otl, gbf, dpl)\n  out <- Filter(function(x) !all(is.na(x)), out)\n  out <- Reduce(\"&\", out)\n  \n  if (verbose == TRUE) {\n    cat(sprintf(\"flagged %s of %s records, EQ = %s \\n\", sum(!out, na.rm = T), \n                length(out), round(sum(!out, na.rm = T)/length(out), 2)))\n  }\n  if (output[1] == \"spatialvalid\") {\n    out <- data.frame(x[, 1:2], validity = val, zeros = zer, capitals = cap, \n                      centroids = cen, sea = sea, urban = urb, countrycheck = con, \n                      outliers = otl, gbif = gbf, duplicates = dpl, summary = out)\n    out <- Filter(function(x) !all(is.na(x)), out)\n    class(out) <- c(\"spatialvalid\", class(out))\n  }\n  if (output[1] == \"cleaned\"){\n    if(is.null(species)){\n    out <- data.frame(x[, 1:2], validity = val, zeros = zer, capitals = cap, \n                      centroids = cen, sea = sea, urban = urb, countrycheck = con, \n                      outliers = otl, gbif = gbf, duplicates = dpl, summary = out)\n    out <- Filter(function(x) !all(is.na(x)), out)\n    out <- out[,1:2]\n    }else{\n      out <- data.frame(x[, 1:2], species = species, validity = val, zeros = zer, \n                        capitals = cap, centroids = cen, sea = sea, urban = urb, \n                        countrycheck = con, outliers = otl, gbif = gbf, duplicates = dpl, summary = out)\n      out <- Filter(function(x) !all(is.na(x)), out)\n      out <- out[,1:3]\n    }\n  }\n  \n  if(report == T){\n    report <- \"CleanCoordinates_report.txt\"\n  }\n  if(is.character(report)){\n    suma <- data.frame(test = as.character(names(out[-c(1:2)])), flagged.records = colSums(!out[-c(1:2)]))\n    suma <- rbind(suma, c(\"Error Quotient\", round(sum(out$summary, na.rm = T)/length(out$summary), 2)))\n    write.table(suma, report, sep = \"\\t\", row.names = F)\n  }\n  \n  return(out)\n}",
    "created" : 1448489317865.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1688964894",
    "id" : "1A9BD9D7",
    "lastKnownWriteTime" : 1448489345,
    "path" : "C:/Users/xzizal/Desktop/GitHub/sampbias/R/CleanCoordinates.R",
    "project_path" : "R/CleanCoordinates.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_source"
}