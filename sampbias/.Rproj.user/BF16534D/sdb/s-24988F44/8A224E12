{
    "contents" : "library(sampbias)\nlibrary(maptools)\nlibrary(speciesgeocodeR)\nsetwd(\"C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/\")\n\n#assign records to gridcells\nsna <- read.table(\"input/coordinates_snakes_south_america.txt\", \n                  sep = \"\\t\", header = T)\n\nsna <- sna[,c(1,4,3)]\nsna <- sna[complete.cases(sna),]\nsna$Lat <- as.character(sna$Lat)\nsna$Long <- as.character(sna$Long)\nrownames(sna) <- NULL\n\nplot(landmass, xlim = c(-95, -30), ylim = c(-65,30))\npoints(sna$Long, sna$Lat, col = \"red\", cex = 0.6)\naxis(1)\n\nsna.val <- CleanCoordinates(sna[,2:3], validity = T, zeros = F, capitals = F, centroids = F,\n                            seas = F, urban = F, countrycheck = F, outliers = F, GBIF = F,)\n\ninvalid <- sna[!(sna.val),]\ninvalid <- invalid[complete.cases(invalid$Lat)| complete.cases(invalid$Long),]\n\nsna <- sna[sna.val,]\nrownames(sna) <- NULL\nsna$Long <- as.numeric(sna$Long)\nsna$Lat <- as.numeric(sna$Lat)\n\n\nsna.flag <- data.frame(read.table(\"output/snakes_error_flags.txt\"))\nclass(sna.flag) <- \"spatialvalid\"\n\nsna.cl <- sna[sna.flag$summary == T,]\n\n\ngrids <- readShapeSpatial(\"input/05_degree_grid.shp\")\n\nmap(\"world\")\nplot(grids, add = T)\n\nnames(sna.cl) <- c(\"identifier\", \"XCOOR\", \"YCOOR\")\noutp <- SpGeoCod(sna.cl, grids, areanames = \"ID\")\n\ninpdat <- data.frame(identifier = outp$identifier_in, outp$species_coordinates_in, \n                     gridcell = outp$sample_table[,2])\nwrite.table(inpdat, \"output/XXX_snakes_grid.txt\", sep = \"\\t\")\n\n\ninpdat <- read.table(\"output/XXX_snakes_grid.txt\", sep = \"\\t\", header = T)\ngrids <- readShapeSpatial(\"input/05_degree_grid.shp\")\n\n#run sampbias on each gridcell\nliste <- unique(inpdat$gridcell)\nliste <- liste[complete.cases(liste)]\nbout <- list()\n\nfor(i in 1:length(liste)){\n  print(paste(i, \"/\", length(liste)))\n  dat <- inpdat[inpdat$gridcell == liste[i],]\n  dat <- dat[complete.cases(dat),]\n  \n  pol <- matrix(c(grids@data[grids@data$ID == liste[i], 2],\n                  grids@data[grids@data$ID == liste[i], 2],\n                  grids@data[grids@data$ID == liste[i], 3],\n                  grids@data[grids@data$ID == liste[i], 3],\n                  grids@data[grids@data$ID == liste[i], 3], \n                  grids@data[grids@data$ID == liste[i], 4],\n                  grids@data[grids@data$ID == liste[i], 5],\n                  grids@data[grids@data$ID == liste[i], 5],\n                  grids@data[grids@data$ID == liste[i], 4],\n                  grids@data[grids@data$ID == liste[i], 4]), \n                ncol = 2, nrow = 5)\n  \n  pol <- SpatialPolygons(list(Polygons(list(Polygon(pol)), ID = \"X\")), \n                         proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n  \n\n  sna.sampb <- SamplingBias(dat[, 2:3],\n                                 tinterpoint = F, verb = F)\n  \n  simu <- SimCoords(dat[,2:3], \n                         model = \"planar\",\n                         method = \"polygon\",\n                         polygon = pol)\n  \n  simu.sampb <- SamplingBias(simu, tinterpoint = F , verb = F)\n  \n  eva <- BiasEval(sna.sampb, simu.sampb)\n  bout[[i]] <- eva\n  names(bout)[i] <- liste[i]\n}\n\nsave(bout)\n\n\n#simulate data per grid cell\n#sambias on simulated data\n#calculate B\n#put out B values for each grid cell\n\n#plot B values per grid cell with coulour code\n\n#plot the summary values per grid cell",
    "created" : 1446136529602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "989265110",
    "id" : "8A224E12",
    "lastKnownWriteTime" : 1446220852,
    "path" : "C:/Users/xzizal/Dropbox (Antonelli Lab)/Arbeit/Gothenburg/Projects/16_spatial_bias_package/testdata/05_B_per_gridcell.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}